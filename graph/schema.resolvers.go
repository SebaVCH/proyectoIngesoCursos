package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"
	"proyectoIngesoCursos/graph/model"
	"proyectoIngesoCursos/models"
	"strconv"
)

// CreateCurso es el resolver para el campo createCurso.
func (r *mutationResolver) CreateCurso(ctx context.Context, instructorID string, title string, description string, price float64, category string) (*model.Curso, error) {
	return r.Resolver.CreateCurso(ctx, instructorID, title, description, price, category)
}

// DeleteCursoByID is the resolver for the deleteCursoByID field.
func (r *mutationResolver) DeleteCursoByID(ctx context.Context, courseID int) (string, error) {
	return r.Resolver.DeleteCursoByID(ctx, uint(courseID))
}

// UpdateCursoByID is the resolver for the updateCursoByID field.
func (r *mutationResolver) UpdateCursoByID(ctx context.Context, courseID int, title string, description string, price float64, category string) (*model.Curso, error) {
	updatedCurso, err := r.Resolver.UpdateCursoByID(ctx, uint(courseID), title, description, price, category)
	if err != nil {
		return nil, err
	}

	// Convertir el modelo Gorm a GraphQL
	return &model.Curso{
		CourseID:     int(updatedCurso.CourseID),
		InstructorID: updatedCurso.InstructorID,
		Title:        updatedCurso.Title,
		Description:  updatedCurso.Description,
		Price:        updatedCurso.Price,
		Category:     updatedCurso.Category,
	}, nil
}

// Cursos es el resolver para el campo cursos.
func (r *queryResolver) Cursos(ctx context.Context) ([]*model.Curso, error) {
	var cursos []models.Curso

	// Obtener todos los cursos de la base de datos
	if err := r.DB.Find(&cursos).Error; err != nil {
		return nil, fmt.Errorf("error al obtener los cursos: %v", err)
	}

	// Convertir los modelos de la base de datos al modelo GraphQL
	var result []*model.Curso
	for _, curso := range cursos {
		result = append(result, &model.Curso{
			CourseID:     int(curso.CourseID),
			InstructorID: curso.InstructorID,
			Title:        curso.Title,
			Description:  curso.Description,
			Price:        curso.Price,
			Category:     curso.Category,
		})
	}

	return result, nil
}

// Curso es el resolver para el campo curso.
func (r *queryResolver) Curso(ctx context.Context, courseID string) (*model.Curso, error) {
	// Implementa la lógica que desees aquí, quizás utilizando courseID para buscar en la base de datos
	return r.CursoByID(ctx, courseID) // Ejemplo de reutilización
}

// CursoByID es el resolver para el campo cursoByID.
func (r *queryResolver) CursoByID(ctx context.Context, courseID string) (*model.Curso, error) {
	// Convertir el courseID de string a uint
	id, err := strconv.ParseUint(courseID, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("ID inválido: %v", err)
	}

	var curso models.Curso

	// Buscar el curso por ID en la base de datos
	if err := r.DB.First(&curso, "course_id = ?", uint(id)).Error; err != nil {
		return nil, fmt.Errorf("curso no encontrado")
	}

	// Convertir el modelo de la base de datos al modelo GraphQL
	return &model.Curso{
		CourseID:     int(curso.CourseID),
		InstructorID: curso.InstructorID,
		Title:        curso.Title,
		Description:  curso.Description,
		Price:        curso.Price,
		Category:     curso.Category,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) DeleteCurso(ctx context.Context, courseID string) (bool, error) {
	var curso models.Curso
	if err := r.DB.First(&curso, "course_id = ?", courseID).Error; err != nil {
		return false, fmt.Errorf("curso no encontrado: %v", err)
	}

	if err := r.DB.Delete(&curso).Error; err != nil {
		return false, fmt.Errorf("error al eliminar el curso: %v", err)
	}

	return true, nil
}
*/
